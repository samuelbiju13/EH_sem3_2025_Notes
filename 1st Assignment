Title: PYTHON SOCKET PORT SCANNER
Aim: To scan ports on a target host using Python and identify active services, helping assess its network exposure and security posture.
Python program:
import socket

target = "192.168.1.14"
open_ports = []

print(f"\n  Scanning {target} [Ports 1-100]...\n")

for port in range(1, 101):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(0.5)
        if s.connect_ex((target, port)) == 0:
            open_ports.append(port)

print("ðŸ”“ Open Ports:")
for p in open_ports:
    try: service = socket.getservbyport(p)
    except: service = "unknown"
    print(f" - Port {p:3} is OPEN ({service.upper()})")

print("\nScan complete.")

Utility:
Port scanning is used to identify which services are running on a system by checking which ports are open. 
This helps security teams understand whatâ€™s exposed to the network, and whether any of those 
services are vulnerable or unnecessary. By analyzing these results, administrators can take steps to improve 
system securityâ€”such as closing unused ports, applying firewall rules, or updating softwareâ€”to reduce 
the risk of cyber attacks.










